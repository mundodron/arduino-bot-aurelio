-- Nome Arquivo : PLCAD001.sql 
-- Versão : 1.0
-- Autor : Sandra Regina B. M. do Nascimento
-- Data: 22/10/2004
--
-- Função : Este programa busca informações do cadastro de clientes do ARBOR e 
--          complementa com informacoes vindas do Siebel. Carrega a tabela 
--	    GVT_CADASTRO_CLIENTE, caso o cliente já existente na tabela veri-
--          fica alteracoes. Depois para que seja gerado arquivo txt para 
--          operadoras deve ser executado a PL/SQL PLCAD002.
--         

-- Alteração: Pegar somente clientes do Acre
-- Alterado por: Igohr Schultz
-- Data: 21/02/2005

-- Alteração: Melhor Performance e Buscar dados de cobrança do Arbor
-- Alterado por: Igohr Schultz
-- Data: 23/02/2005

SET SERVEROUTPUT ON;
SET SERVEROUT ON SIZE 1000000;

-- PARAMETROS
-- 1: DIRETORIO QUE VAI FICAR O LOG DE PROCESSAMENTO DO ARQUIVO

-- 	*** DECLARACAO DE VARIAVEIS ***

DECLARE
-- *** VARIAVEIS PARA TRATAMENTO DE ARQUIVOS
	V_NOME_ARQ_LOG		VARCHAR2(50);
	V_NOME_DIR_LOG		VARCHAR2(50) := '&1';
	V_LOG              	UTL_FILE.FILE_TYPE;

	V_INDICE			NUMBER(1) := '&2';
	V_ACCOUNT_MIN		NUMBER(10);
	V_ACCOUNT_MAX		NUMBER(10);

-- *** VARIAVEIS PARA TRUNCATE DE TABELA ***
	CURSOR_ 		INTEGER;
	RETORNO_ 		INTEGER;

	V_TEMP 			VARCHAR2(1);

-- *** VARIAVEIS DO PROGRAMA
	V_NUM_REGISTRO     	NUMBER(10); -- CONTADOR PARA COMMIT
	V_VLR_VALIDO_VARIAVEL	VARCHAR2(1); -- SE S VALOR DA VARIAVEL EH VALIDO, SE N, NAO
	V_VLR_AUX		NUMBER; -- VAR AUXILIAR PARA CONVERSAO TO_NUMBER
	V_ERRO             	VARCHAR2(200); -- IDENTIFICA O TIPO DE ERRO DO ORACLE
					
	V_LAST_EVENT_NO		NUMBER(3); -- ULTIMO EVENTO DE COBRANCA
	V_EVENT_NO				NUMBER(3); -- EVENTO DE SUSPENSAO PARCIAL
	V_SCENARIO_ID			NUMBER(6); -- SCENARIO_ID DO CLIENTE
	V_TRACKING_ID			NUMBER(10); -- TRACKING_ID DO CLIENTE

	V_DT_INI_SUSPENSAO	GVT_CADASTRO_CLIENTE.SUSP_CL_DT_INI%TYPE; -- DATA INICIAL DA SUSPENSAO
	V_DT_FIM_SUSPENSAO	GVT_CADASTRO_CLIENTE.SUSP_CL_DT_FIM%TYPE; -- DATA FINAL DA SUSPENSAO
	V_IND_SUSPENSAO			GVT_CADASTRO_CLIENTE.SUSP_CL_INDICADOR%TYPE; -- INDICA SE HOUVE OU NAO SUSPENSAO
	V_IND_INAD 					GVT_CADASTRO_CLIENTE.INAD_CL_INDICADOR%TYPE; -- INDICADOR DE INADIMPLENCIA
	V_DT_INI_INAD 			GVT_CADASTRO_CLIENTE.INAD_CL_DT_INI%TYPE; -- DATA INICIAL DE INADIMPLENCIA
	V_DT_FIM_INAD			  GVT_CADASTRO_CLIENTE.INAD_CL_DT_FIM%TYPE; -- DATA FINAL DE INADIMPLENCIA
	V_IND_ISENCAO_TRIB	GVT_CADASTRO_CLIENTE.IND_ISENCAO_TRIB%TYPE; -- ISENCAO DE IMPOSTOS
	V_PERC_ISENCAO			GVT_CADASTRO_CLIENTE.PERCENTUAL_ISENCAO%TYPE; -- PERCENTUAL DE ISENCAO DE IMPOSTOS
	V_TP_ATUALIZ       	GVT_CADASTRO_CLIENTE.TP_ATUALIZ%TYPE; -- ATUALIZA CAMPO OU INCLUI
	V_SOLN_ID						GVT_CADASTRO_CLIENTE.SOLN_ID%TYPE; -- INFORMACAO DO SIEBEL
	V_IND_COBRANCA     	GVT_CADASTRO_CLIENTE.TRONCO_IDENT_COBRANCA%TYPE; -- INDICACAO DE COBRANCA
	V_IND_SIGILO       	GVT_CADASTRO_CLIENTE.IND_SIGILO%TYPE; -- SIGILO DE TELEFONE
	V_RANGE            	GVT_CADASTRO_CLIENTE.RANGE%TYPE; -- RANGE DO TELEFONE

	V_TIPO_TELEFONE    	VARCHAR2(1); -- TIPO DO TELEFONE
	V_PILOTO           	VARCHAR2(1); -- IDENTIFICADOR NR PILOTO
	V_CLIENTE_EXISTE	  VARCHAR2(1);

	-- verificar ainda se necessario
	V_LINHA_CNL        	GVT_CADASTRO_CLIENTE.LINHA_CNL%TYPE;
  V_LINHA_DDD        	GVT_CADASTRO_CLIENTE.LINHA_DDD%TYPE;
  V_LINHA_TELEFONE   	GVT_CADASTRO_CLIENTE.LINHA_TELEFONE%TYPE;
  V_TRONCO_CNL       	GVT_CADASTRO_CLIENTE.TRONCO_CNL%TYPE;
  V_TRONCO_DDD       	GVT_CADASTRO_CLIENTE.TRONCO_DDD%TYPE;
  V_TRONCO_TELEFONE  	GVT_CADASTRO_CLIENTE.TRONCO_TELEFONE%TYPE;


	-- INFORMACOES DE COBRANCA
  V_ULT_CLIENTE         VARCHAR2(48) := ' ';
  V_COBR_CEP         		VARCHAR2(12);
  V_COBR_LOGRADOURO  		GVT_CADASTRO_CLIENTE.COB_LOGRADOURO%TYPE;
  V_COBR_NUMERO      		GVT_CADASTRO_CLIENTE.COB_NRO%TYPE;
  V_COBR_COMPLEMENTO 		GVT_CADASTRO_CLIENTE.COB_COMPLEMENTO%TYPE;
  V_COBR_BAIRRO      		GVT_CADASTRO_CLIENTE.COB_BAIRRO%TYPE;
  V_COBR_MUNICIPIO   		GVT_CADASTRO_CLIENTE.COB_MUNICIPIO%TYPE;
  V_COBR_UF          		GVT_CADASTRO_CLIENTE.COB_UF%TYPE;

	-- INFORMACOES DE INSTALACAO
	V_INST_NUMERO      GVT_CADASTRO_CLIENTE.INST_NRO%TYPE; 
	V_INST_LOGRADOURO  GVT_CADASTRO_CLIENTE.INST_LOGRADOURO%TYPE;

	
-- *** CURSOR QUE CONTEM TODOS OS CLIENTES DA TABELA TEMPORARIA
	CURSOR C_CLIENTE (C_ACCOUNT_MIN NUMBER, C_ACCOUNT_MAX NUMBER) IS
	SELECT /*+ full (cc) parallel (cc 9) */
		CCT.CLIENTE,
		CCT.SUBSCR_NO,
		CCT.NOME_ASSINANTE,
		CCT.TIPO_DOC,
		CCT.NUMERO_DOCUMENTO,
		CCT.INSC_ESTADUAL,
		CCT.CATEGORIA,
		CCT.TIPO_TERMINAL,
		CCT.IND_RETENCAO_TRIBUTOS,
		CCT.DIA_VENC_FATURA,
		CCT.COBR_LOGRADOURO,
		CCT.COBR_COMPLEMENTO,
		CCT.COBR_BAIRRO,
		CCT.COBR_MUNICIPIO,
		CCT.COBR_UF,
		TRIM(CCT.COBR_CEP) COBR_CEP,
		CCT.INST_LOGRADOURO,
		CCT.INST_COMPLEMENTO,
		CCT.INST_BAIRRO,
		CCT.INST_MUNICIPIO,
		CCT.INST_UF,
		TRIM(CCT.INST_CEP) INST_CEP,
		CCT.DT_ATIVACAO,
		CCT.DT_DESATIVACAO,
		CCT.ACCOUNT_NO,
		CCT.TELEFONE,
		CCT.RPON,
		CCT.CNL,
		CCT.EOT_ORIGEM,
		NVL(CC.EXTERNAL_ID,'N') EXISTE,
		CC.COD_EOT_ORIGEM           CC_COD_EOT_ORIGEM,
		CC.EXTERNAL_ID              CC_EXTERNAL_ID,
		CC.SUBSCR_NO                CC_SUBSCR_NO,
		CC.NOME_ASSINANTE           CC_NOME_ASSINANTE,
		CC.TIPO_DOC                 CC_TIPO_DOC,
		CC.NUMERO_DOCUMENTO         CC_NUMERO_DOCUMENTO,
		CC.INSC_ESTADUAL            CC_INSC_ESTADUAL,
		CC.CNAE_FISCAL              CC_CNAE_FISCAL,
		CC.TIPO_TERMINAL            CC_TIPO_TERMINAL,
		CC.SOLN_ID                  CC_SOLN_ID,
		CC.LINHA_CNL                CC_LINHA_CNL,
		CC.LINHA_DDD                CC_LINHA_DDD,
		CC.LINHA_TELEFONE           CC_LINHA_TELEFONE,
		CC.TRONCO_CNL               CC_TRONCO_CNL,
		CC.TRONCO_DDD               CC_TRONCO_DDD,
		CC.TRONCO_TELEFONE          CC_TRONCO_TELEFONE,
		CC.TRONCO_IDENT_COBRANCA    CC_TRONCO_IDENT_COBRANCA,
		CC.INST_TIPO_LOGRA          CC_INST_TIPO_LOGRA,
		CC.INST_LOGRADOURO          CC_INST_LOGRADOURO,
		CC.INST_NRO                 CC_INST_NRO,
		CC.INST_COMPLEMENTO         CC_INST_COMPLEMENTO,
		CC.INST_BAIRRO              CC_INST_BAIRRO,
		CC.INST_MUNICIPIO           CC_INST_MUNICIPIO,
		CC.INST_CNL                 CC_INST_CNL,
		CC.INST_UF                  CC_INST_UF,
		CC.INST_CEP                 CC_INST_CEP,
		CC.COB_TIPO_LOGRA           CC_COBR_TIPO_LOGRA,
		CC.COB_LOGRADOURO           CC_COBR_LOGRADOURO,
		CC.COB_NRO                  CC_COBR_NRO,
		CC.COB_COMPLEMENTO          CC_COBR_COMPLEMENTO,
		CC.COB_BAIRRO               CC_COBR_BAIRRO,
		CC.COB_MUNICIPIO            CC_COBR_MUNICIPIO,
		CC.COB_CNL                  CC_COBR_CNL,
		CC.COB_UF                   CC_COBR_UF,
		CC.COB_CEP                  CC_COBR_CEP,
		CC.CONTATO_CNL              CC_CONTATO_CNL,
		CC.CONTATO_DDD              CC_CONTATO_DDD,
		CC.CONTATO_TELEFONE         CC_CONTATO_TELEFONE,
		CC.SUSP_CL_INDICADOR        CC_SUSP_CL_INDICADOR,
		CC.SUSP_CL_DT_INI           CC_SUSP_CL_DT_INI,
		CC.SUSP_CL_DT_FIM           CC_SUSP_CL_DT_FIM,
		CC.INAD_CL_INDICADOR        CC_INAD_CL_INDICADOR,
		CC.INAD_CL_DT_INI           CC_INAD_CL_DT_INI,
		CC.INAD_CL_DT_FIM           CC_INAD_CL_DT_FIM,
		CC.IND_SIGILO               CC_IND_SIGILO,
		CC.TP_ATUALIZ               CC_TP_ATUALIZ,
		CC.DT_ATUALIZ               CC_DT_ATUALIZ,
		CC.TELEFONE_ANT_CNL         CC_TELEFONE_ANT_CNL,
		CC.TELEFONE_ANT_DDD         CC_TELEFONE_ANT_DDD,
		CC.TELEFONE_ANT_TELEFONE    CC_TELEFONE_ANT_TELEFONE,
		CC.TELEFONE_ANT_DT_TROCA    CC_TELEFONE_ANT_DT_TROCA,
		CC.HR_EXECUCAO              CC_HR_EXECUCAO,
		CC.DT_ATIVACAO              CC_DT_ATIVACAO,
		CC.DT_DESATIVACAO           CC_DT_DESATIVACAO,
		CC.IND_ISENCAO_TRIB         CC_IND_ISENCAO_TRIB,
		CC.PERCENTUAL_ISENCAO       CC_PERCENTUAL_ISENCAO,
		CC.RETENCAO_TRIBUTOS        CC_RETENCAO_TRIBUTOS,
		CC.DIA_VENC_FATURA          CC_DIA_VENC_FATURA,
		CC.MOTIVO_ENVIO_CADASTRO    CC_MOTIVO_ENVIO_CADASTRO,
		CC.DT_TB_ATUALIZ            CC_DT_TB_ATUALIZ,
		CC.GERA_TXT                 CC_GERA_TXT,
		CC.RANGE                    CC_RANGE
	FROM 
		 GVT_CAD_CLIENTE_TEMP CCT,
		 GVT_CADASTRO_CLIENTE CC
	WHERE 
		CCT.EOT_ORIGEM = CC.COD_EOT_ORIGEM (+) AND
	  	CCT.CLIENTE = CC.EXTERNAL_ID (+) AND
	  	CCT.SUBSCR_NO = CC.SUBSCR_NO (+) AND
	  	SUBSTR(CCT.TELEFONE,1,2) = CC.CONTATO_DDD (+) AND
	  	SUBSTR(CCT.TELEFONE,3,8) = CC.CONTATO_TELEFONE (+) AND
	  	CCT.ACCOUNT_NO BETWEEN C_ACCOUNT_MIN AND C_ACCOUNT_MAX;

-- INFORMACOES DO SIEBEL
	CURSOR C_DDR_TRONCO (C_CLIENTE	VARCHAR2) IS
	SELECT T2.ROW_ID SOLN_ID        
	FROM S_ORG_EXT T1,
		S_QUOTE_SOLN T2
	WHERE T2.PROD_ID IN ('1-9SP8','1-N69L','1-26BB57','1-15GCGO','1-26BB5B')
		AND T2.COPIED_FLG = 'N' 
		AND T2.STATUS_CD  = 'Ativo' 
		AND T1.ROW_ID     = T2.INV_ACCNT_ID(+) -- Busca pela conta de Cobrança
		AND T1.X_ACCT_ID_NUM = TO_NUMBER(C_CLIENTE);


	CURSOR C_RANGE (C_SOLN_ID IN VARCHAR2) IS
	SELECT T3.NAME NAME, 
		T4.X_RANGE_INICIAL RANGE_INICIAL,
		T4.X_RANGE_FINAL RANGE_FINAL, 
		T4.X_TEXTO_LIVRE TRONCO,
		T4.X_LISTA_DE_VALORES X_LISTA_DE_VALORES
	FROM S_QUOTE_ITEM T1,
		S_QTEITEM_PARAM T2,
		S_PARAM_NAME T3,
		S_PARAM T4
	WHERE T4.PARAM_NAME_ID = T3.ROW_ID
		AND T2.PARAM_ID= T4.ROW_ID
		AND T1.ROW_ID = T2.QUOTE_ITEM_ID
		AND T1.PROD_ID IN ('1-N69K','1-N69E','1-1BPLSY','1-26BB5F','1-15GCH0','1-26BB5E','1-1BPLSZ')
		AND T1.QUOTE_SOLN_ID = C_SOLN_ID;


	CURSOR LE_PARAMETRO (C_SOLN_ID IN VARCHAR2) IS
	SELECT DECODE(TRIM(T4.X_LISTA_DE_VALORES),'Sim','1','Nao','2','1') X_LISTA_DE_VALORES
	FROM S_QUOTE_ITEM T1,
		S_PROD_INT T2,
		S_PARAM_NAME T3,
		S_PARAM T4
	WHERE T1.QUOTE_SOLN_ID = C_SOLN_ID 
		AND T1.PROD_ID = T2.ROW_ID 
--		AND T2.X_GVT_PROD_COD = 78 
		AND T4.REF_TABLE_ID = T1.ROW_ID 
		AND T4.PARAM_NAME_ID = T3.ROW_ID 
		AND T3.NAME = 'Figurar em lista ?';

	CURSOR LE_PARAMETRO_RANGE (C_SOLN_ID IN VARCHAR2, C_TELEFONE IN VARCHAR2) IS
	SELECT DECODE(TRIM(T4.X_LISTA_DE_VALORES),'Sim','1','Nao','2','1') X_LISTA_DE_VALORES
	FROM S_QUOTE_ITEM T1,
		S_QTEITEM_PARAM T2,
		S_PARAM_NAME T3,
		S_PARAM T4
	WHERE T4.PARAM_NAME_ID = T3.ROW_ID
		AND T2.PARAM_ID = T4.ROW_ID
		AND T1.ROW_ID = T2.QUOTE_ITEM_ID
		AND T1.PROD_ID in ('1-N69K','1-N69E','1-1BPLSY')
		AND T1.QUOTE_SOLN_ID = C_SOLN_ID
		AND T3.NAME = 'Divulgar / Figurar Faixas'
		AND C_TELEFONE >= T4.X_RANGE_INICIAL 
		AND C_TELEFONE <= T4.X_RANGE_FINAL;
	


--
-- PROCEDURE
-- BUSCA DADOS DE COBRANCA DO SIEBEL
--

PROCEDURE BUSCA_DADOS_COBRANCA (L_CLIENTE 	VARCHAR2) IS
BEGIN
	
	V_ERRO := NULL;
	
	IF V_ULT_CLIENTE <> L_CLIENTE THEN

		V_ULT_CLIENTE      := L_CLIENTE;
		V_COBR_LOGRADOURO  := NULL;
		V_COBR_NUMERO      := NULL;
		V_COBR_COMPLEMENTO := NULL;
		V_COBR_BAIRRO      := NULL;
		V_COBR_MUNICIPIO   := NULL;
		V_COBR_UF          := NULL;
		V_COBR_CEP         := NULL;

		BEGIN

			SELECT SUBSTR(TRIM(T3.ZIPCODE),1,8) CEP, SUBSTR(T3.ADDR,1,50) LOGRADOURO, 
				SUBSTR(TRIM(T3.STATE),1,2) UF, SUBSTR(T3.PROVINCE,1,40) BAIRRO, 
				SUBSTR(TRIM(T4.X_NUMERO),1,7) NUMERO, 
				SUBSTR(T4.X_COMPLEMENTO,1,50) COMPLEMENTO, SUBSTR(T3.CITY,1,44) MUNICIPIO
			INTO V_COBR_CEP, V_COBR_LOGRADOURO, V_COBR_UF, V_COBR_BAIRRO, 
				V_COBR_NUMERO, V_COBR_COMPLEMENTO, V_COBR_MUNICIPIO     
			FROM S_ORG_EXT T1,
				S_INV_PROF T5, 
				S_CON_ADDR T4,
				S_ADDR_PER T3
			WHERE T3.ROW_ID = T4.ADDR_PER_ID
				AND T5.ROW_ID = T4.ACCNT_ID
				AND T5.X_PR_BILL_ADDR_ID = T4.ADDR_PER_ID
				AND T1.ROW_ID = T5.ACCNT_ID
				AND T1.X_ACCT_ID_NUM = TO_NUMBER(L_CLIENTE)
				AND ROWNUM = 1;

			V_COBR_CEP := REPLACE(V_COBR_CEP,'-','');
			
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_ERRO := 'ALERTA: Endereço de cobrança não encontrado no Siebel - ';
		WHEN OTHERS THEN
			V_ERRO := 'ALERTA: Busca endereço de cobrança no Siebel - ERRO - '  || SQLERRM(SQLCODE);
		END;
	
	END IF;


END;  -- BUSCA_DADOS_COBRANCA


--
-- PROCEDURE
-- BUSCA_INFORMACOES_SIEBEL
--
-- *** BUSCA INFORMACOES DO SIEBEL
-- *** TRONCO E SE DIVULGA EM LISTA

PROCEDURE BUSCA_INFORMACOES_SIEBEL (
	L_GVT_EXISTE_CLIENTE 	VARCHAR2,
	L_CATEGORIA				NUMBER,
	L_CLIENTE				VARCHAR2,
	L_TELEFONE				VARCHAR2,
	L_SOLN_ID				VARCHAR2,
	L_CNL					NUMBER,
	L_IND_SIGILO			VARCHAR2,
	L_TRONCO_TELEFONE		VARCHAR2,
	L_RANGE					VARCHAR2) IS
		
BEGIN

	V_IND_SIGILO := NULL;
	V_IND_COBRANCA := NULL;
	V_TIPO_TELEFONE := NULL;
	V_ERRO := NULL;
	V_RANGE := NULL;
	V_PILOTO := NULL;

	IF L_GVT_EXISTE_CLIENTE = 'N' THEN

		-- SE CLIENTE FOR DIFERENTE DE RETAIL E SOHO PODE TER TRONCO
		IF L_CATEGORIA > 11 THEN

			V_SOLN_ID := NULL;

			BEGIN

				SELECT T2.ROW_ID SOLN_ID,
	                   'P',
	                   'S'
	              INTO V_SOLN_ID,
	                   V_TIPO_TELEFONE,
	                   V_IND_COBRANCA
	              FROM S_ORG_EXT T1,
	                   S_QUOTE_SOLN T2
	             WHERE (T2.PROD_ID IN ('1-18V', '1-53YPJ') OR (T2.PROD_ID = '1-53YOP' AND T2.SERV_PROD_ID = '1-5D6BV'))   -- VOIP
	               AND T2.COPIED_FLG = 'N'
	               AND T2.STATUS_CD = 'Ativo'
	               AND T1.ROW_ID = T2.INV_ACCNT_ID(+)
	               -- Busca pela conta de Cobrança
	               AND T1.X_ACCT_ID_NUM = TO_NUMBER (L_CLIENTE)
	               AND T2.X_NUMERO_PILOTO = L_TELEFONE
	               AND T2.ASSET_NUM = T2.X_NUMERO_PILOTO;

				EXCEPTION
	            WHEN NO_DATA_FOUND
	            THEN
	         
					IF V_SOLN_ID IS NULL
					THEN   --busca de corporativo (DDR e TRONCO)
		            BEGIN

						V_RANGE := NULL;
						V_PILOTO := NULL;
	
						FOR REG_DDR_TRONCO IN C_DDR_TRONCO (L_CLIENTE)
						LOOP
							
	                        V_SOLN_ID := REG_DDR_TRONCO.SOLN_ID;
	                        V_IND_COBRANCA := NULL;
	                        V_TIPO_TELEFONE := NULL;
	                        V_IND_SIGILO := '1';   --default divulga em lista
	
							--procura range ou tronco
							FOR REG_RANGE IN C_RANGE (V_SOLN_ID)
							LOOP
								
								IF REG_RANGE.NAME = 'Piloto Vox Digital Tronco' OR REG_RANGE.NAME = 'Piloto DDR' THEN
								
									IF REG_RANGE.TRONCO = L_TELEFONE THEN
								
										V_TIPO_TELEFONE := 'P';
										V_IND_COBRANCA := 'S';

									ELSE
	
										V_TIPO_TELEFONE := 'T';
										V_IND_COBRANCA := 'N';
	
									END IF;

								--verifica se telefone tronco
								ELSIF REG_RANGE.NAME = 'Numero Piloto' AND REG_RANGE.TRONCO = L_TELEFONE THEN

									V_TIPO_TELEFONE := 'P';
									V_IND_COBRANCA := 'S';
									V_PILOTO := 'S';

								END IF;
								
								--verifica divulgacao em lista para telefone tronco
								IF REG_RANGE.NAME = 'Figurar em lista ?' AND REG_RANGE.X_LISTA_DE_VALORES = 'Nao' THEN
									
									V_IND_SIGILO := '2';
								
								END IF;
								
								--verifica se telefone faz parte do range
								IF REG_RANGE.NAME = 'Range de numeros' OR REG_RANGE.NAME = 'Range de ramais' THEN
									
									IF L_TELEFONE >= REG_RANGE.RANGE_INICIAL AND L_TELEFONE <= REG_RANGE.RANGE_FINAL THEN
									
										V_RANGE := 'S';
									
									END IF;
								
								END IF;
								
								--verifica divulgacao em lista para telefone de range
								IF REG_RANGE.NAME = 'Divulgar / Figurar Faixas'
									AND L_TELEFONE >= REG_RANGE.RANGE_INICIAL
									AND L_TELEFONE <= REG_RANGE.RANGE_FINAL
									AND REG_RANGE.X_LISTA_DE_VALORES = 'Nao' THEN
									
									V_IND_SIGILO := '2';
								
								END IF;

							END LOOP; -- FOR REG_RANGE IN C_RANGE (V_SOLN_ID)
	
	                        IF V_RANGE = 'S' OR V_PILOTO = 'S'
	                        THEN

								EXIT;

	                        ELSE

								V_IND_COBRANCA := NULL;
								V_TIPO_TELEFONE := NULL;
								V_IND_SIGILO := '1';

	                        END IF;
						
	                    END LOOP;   --REG_DDR_TRONCO
	
						EXCEPTION
						WHEN OTHERS
						THEN
	                        V_ERRO := 'ALERTA: Verifica range de numero no Siebel - ERRO ' || SQLERRM (SQLCODE);
	            END;
	            END IF;   

	            WHEN OTHERS
	            THEN
	            	
	            	V_ERRO := 'ALERTA: Verifica telefone piloto Siebel - ERRO ' || SQLERRM (SQLCODE);
	               
			END;
			
		ELSE -- IF L_CATEGORIA > 11 THEN
	
			V_TIPO_TELEFONE := 'T';
			V_IND_COBRANCA := 'S';

		END IF; -- IF L_CATEGORIA > 11 THEN

		IF V_TIPO_TELEFONE IS NOT NULL THEN   --casos de telefone normal
			
			IF V_TIPO_TELEFONE = 'T' THEN
			
				V_LINHA_CNL := L_CNL;
				V_LINHA_DDD := SUBSTR (L_TELEFONE, 1, 2);
				V_LINHA_TELEFONE := SUBSTR (L_TELEFONE, 3, 8);
				V_TRONCO_CNL := NULL;
				V_TRONCO_DDD := NULL;
				V_TRONCO_TELEFONE := NULL;
			
			ELSIF V_TIPO_TELEFONE = 'P' THEN -- IF V_TIPO_TELEFONE = 'T' THEN
			
				V_TRONCO_CNL := L_CNL;
				V_TRONCO_DDD := SUBSTR (L_TELEFONE, 1, 2);
				V_TRONCO_TELEFONE := SUBSTR (L_TELEFONE, 3, 8);
				V_LINHA_CNL := NULL;
				V_LINHA_DDD := NULL;
				V_LINHA_TELEFONE := NULL;
			
			END IF; -- IF V_TIPO_TELEFONE = 'T' THEN
		
			IF V_RANGE IS NULL THEN
			
				FOR REG_PARAMETRO IN LE_PARAMETRO (L_SOLN_ID) LOOP
					
					V_IND_SIGILO := REG_PARAMETRO.X_LISTA_DE_VALORES;
				
					V_SOLN_ID := L_SOLN_ID; -- NECESSARIO, POIS FICA NULL QDO EH DIF DE ACCOUNT_CATEGORY 10 E 11
				
				END LOOP;
			
			END IF;	-- IF V_RANGE IS NULL THEN

		ELSE	-- IF V_TIPO_TELEFONE IS NOT NULL THEN

			V_ERRO := 'ALERTA: Telefone nao encontrado no Siebel(cliente gerado sem informacoes do Siebel)';
			-- NAUM USA EM NENHUM LUGAR
			--V_TELEFONE_SIEBEL := 'N';
			--informa telefone como nao sendo tronco
			V_IND_COBRANCA := 'N';
			V_TIPO_TELEFONE := 'T';
			V_LINHA_CNL := L_CNL;
			V_LINHA_DDD := SUBSTR (L_TELEFONE, 1, 2);
			V_LINHA_TELEFONE := SUBSTR (L_TELEFONE, 3, 8);
			V_TRONCO_CNL := NULL;
			V_TRONCO_DDD := NULL;

		END IF;	-- IF V_TIPO_TELEFONE IS NOT NULL THEN
		
	ELSE -- IF L_GVT_EXISTE_CLIENTE = 'N' THEN

      	    IF L_TRONCO_TELEFONE IS NOT NULL THEN

      	        V_TIPO_TELEFONE := 'P';

      	    ELSE 

      	        V_TIPO_TELEFONE := 'T';

      	    END IF;
      	    
      	    -- alterar
      	    IF L_RANGE = 'N' THEN

      	        FOR REG_PARAMETRO IN LE_PARAMETRO(L_SOLN_ID) LOOP

                    V_IND_SIGILO := REG_PARAMETRO.X_LISTA_DE_VALORES;

      	  	    END LOOP;

      	  	ELSE 

      	  	    V_IND_SIGILO := '1';

      	  	    FOR REG_PARAMETRO_RANGE IN LE_PARAMETRO_RANGE (L_SOLN_ID, L_TELEFONE) LOOP

                    V_IND_SIGILO := REG_PARAMETRO_RANGE.X_LISTA_DE_VALORES;

      	  	    END LOOP;

      	  	END IF;
    
      	  	IF NVL(V_IND_SIGILO,'1') <> L_IND_SIGILO THEN
    
      	  	    --DBMS_OUTPUT.PUT_LINE('ATUALIZOU IND_SIGILO');
      	  	    V_TP_ATUALIZ := 'A';
    
      	  	END IF;

	END IF; -- IF L_GVT_EXISTE_CLIENTE = 'N' THEN

  	IF V_IND_SIGILO IS NULL THEN

		V_IND_SIGILO := '1';

    END IF;
	
END;

--
-- PROCEDURE
-- BUSCA_INFORMACAO_SUSPENSAO
--
PROCEDURE BUSCA_INFORMACAO_SUSPENSAO (
		L_EXISTE 		VARCHAR2,
		L_ACCOUNT_NO 		NUMBER,
		L_SUBSCR_NO		NUMBER,
		L_SUSP_CL_INDICADOR 	VARCHAR2,
		L_SUSP_CL_DT_INI	DATE,
		L_SUSP_CL_DT_FIM	DATE) IS
			
BEGIN
	V_ERRO := NULL;
	
	BEGIN

--	DBMS_OUTPUT.PUT_LINE('L_EXISTE: ' || L_EXISTE);
--	DBMS_OUTPUT.PUT_LINE('L_ACCOUNT_NO: ' || L_ACCOUNT_NO);
--	DBMS_OUTPUT.PUT_LINE('L_SUBSCR_NO: ' || L_SUBSCR_NO);
--	DBMS_OUTPUT.PUT_LINE('L_SUSP_CL_INDICADOR: ' || L_SUSP_CL_INDICADOR);
--	DBMS_OUTPUT.PUT_LINE('L_SUSP_CL_DT_INI: ' || L_SUSP_CL_DT_INI);
--	DBMS_OUTPUT.PUT_LINE('L_SUSP_CL_DT_FIM: ' || L_SUSP_CL_DT_FIM);

	-- SELECIONA A DATA DE INICIO E FINAL DA SUSPENSAO
	SELECT MAX(START_DT), MAX(END_DT)
	INTO V_DT_INI_SUSPENSAO, V_DT_FIM_SUSPENSAO
	FROM CUSTOMER_CONTRACT
	WHERE CONTRACT_TYPE BETWEEN 18362 AND 18365
		AND END_DT > SYSDATE
		AND ((CONTRACT_LEVEL = 1 AND PARENT_ACCOUNT_NO = L_ACCOUNT_NO)
		  OR (CONTRACT_LEVEL = 3 AND PARENT_SUBSCR_NO = L_SUBSCR_NO));

	-- SE NAO POSSUI DATA SUSPENSAO     
	IF V_DT_INI_SUSPENSAO IS NULL THEN
		V_IND_SUSPENSAO := 'N';
	ELSE
		V_IND_SUSPENSAO := 'S';
	END IF;
     
	-- SE CLIENTE EXISTE, VERIFICA SE ALTEROU A DT DE SUSPENSAO PARA ATUALIZA-LA     
	IF L_EXISTE != 'N' THEN 
		IF V_IND_SUSPENSAO != L_SUSP_CL_INDICADOR OR 
		(V_IND_SUSPENSAO = 'S' AND    --suspensao com datas diferentes
		(V_DT_INI_SUSPENSAO <> L_SUSP_CL_DT_INI OR
		V_DT_FIM_SUSPENSAO <> L_SUSP_CL_DT_FIM)) THEN
		
			--DBMS_OUTPUT.PUT_LINE('ATUALIZOU DT_SUSPENSAO');
			
			V_TP_ATUALIZ := 'A';
			
		END IF;
	END IF;

	EXCEPTION
	WHEN OTHERS THEN
		V_ERRO := 'ALERTA: Verifica suspensao - ERRO ' || SQLERRM(SQLCODE);
	END;

END;  -- BUSCA_INFORMACAO_SUSPENSAO

--
-- PROCEDURE
-- BUSCA_INFORMACAO_INADIMPLENCIA
--

--PROCEDURE BUSCA_INFORMACAO_INADIMPLENCIA (
--		L_EXISTE 		VARCHAR2,
--		L_IND_INAD		VARCHAR2,
--		L_ACCOUNT_NO		NUMBER,
--		L_DT_FIM_INAD   	DATE,
--		L_DT_INI_INAD   	DATE,
--		L_DT_TB_ATUALIZ		DATE) IS
--
--
--BEGIN
--	V_ERRO := NULL;
--BEGIN
--
----	DBMS_OUTPUT.PUT_LINE('L_EXISTE: ' || L_EXISTE);
----	DBMS_OUTPUT.PUT_LINE('L_IND_INAD: ' || L_IND_INAD);
----	DBMS_OUTPUT.PUT_LINE('L_ACCOUNT_NO: ' || L_ACCOUNT_NO);
----	DBMS_OUTPUT.PUT_LINE('L_DT_FIM_INAD: ' || L_DT_FIM_INAD);
----	DBMS_OUTPUT.PUT_LINE('L_DT_INI_INAD: ' || L_DT_INI_INAD);
----	DBMS_OUTPUT.PUT_LINE('L_DT_TB_ATUALIZ: ' || L_DT_TB_ATUALIZ);
--	
--	IF L_EXISTE = 'N' OR (L_EXISTE = 'S' AND L_IND_INAD = 'N') THEN
--
--		V_IND_INAD := 'N';
--		V_DT_INI_INAD := NULL;
--		V_DT_FIM_INAD := NULL;
--
--		BEGIN
--	        
--			BEGIN
--				-- BUSCA EVENTO DE COBRANCA DO CLIENTE
--				SELECT COL.SCENARIO_ID, COL.LAST_EVENT_NO, CSD.EVENT_NO, COL.TRACKING_ID
--				INTO V_SCENARIO_ID, V_LAST_EVENT_NO, V_EVENT_NO, V_TRACKING_ID
--				FROM COL_CUSTOMER COL,
--					COL_SCENARIO_DEFINITION CSD
--				WHERE COL.ACCOUNT_NO = L_ACCOUNT_NO
--					AND COL.COL_ACTIVE_FLAG  =  1
--					AND COL.COL_EXIT_DATE IS NULL
--					AND COL.LAST_EVENT_NO > 0 
--					AND COL.SCENARIO_ID = CSD.SCENARIO_ID 
--					AND CSD.EVENT = 'Suspensao Parcial';
--
--				IF (V_LAST_EVENT_NO >= V_EVENT_NO) THEN
--					V_IND_INAD := 'S';
--					IF (L_EXISTE = 'S') THEN
--						V_TP_ATUALIZ := 'A';
--					END IF;
--					IF (V_SCENARIO_ID = 7) THEN
--						V_IND_INAD := 'N';
--						V_TP_ATUALIZ := NULL;
--					END IF; -- IF (V_SCENARIO_ID = 7)
--				END IF; -- IF (V_LAST_EVENT_NO >= V_EVENT_NO)
--
--
--				--EXCEPTION
--				--WHEN NO_DATA_FOUND THEN
--				--	V_ERRO := 'ALERTA: Cliente não esta com Suspensao Parcial ' || SQLERRM(SQLCODE);
--				--WHEN OTHERS THEN
--				--	V_ERRO := 'Busca evento Suspensao Parcial - ERRO' || SQLERRM(SQLCODE);
--			END;
--
--			-- CLIENTE EH INADIMPLENTE	            
--			IF V_IND_INAD = 'S' THEN
--				BEGIN
--					
--					-- SELECIONADA DATA DA SUSPENSAO PARCIAL
--					SELECT QUE.PROCESSED_DATE
--					INTO V_DT_INI_INAD
--					FROM COL_EVENT_QUEUE QUE
--					WHERE QUE.ACCOUNT_NO  = L_ACCOUNT_NO
--						AND QUE.TRACKING_ID = V_TRACKING_ID
--						AND QUE.EVENT_NO = V_EVENT_NO
--						AND QUE.QUEUE_STATUS = 1; 
--
--					-- SE NAO ENCONTRAR DATA, CLIENTE EH ADIMPLENTE
--					IF V_DT_INI_INAD IS NULL THEN
--						V_IND_INAD := 'N';
--						V_TP_ATUALIZ := NULL;
--					END IF;
--	
--					EXCEPTION
--					WHEN NO_DATA_FOUND THEN
--						V_IND_INAD := 'N';
--						V_TP_ATUALIZ := NULL;
--					WHEN OTHERS THEN
--						V_ERRO := 'ALERTA: Busca data de inadimplencia - ERRO ' || SQLERRM(SQLCODE);
--				END;
--			END IF; -- IF V_IND_INAD = 'S' THEN
--	        
--			EXCEPTION
--			WHEN NO_DATA_FOUND THEN
--				NULL;  --CLIENTE ATIVO
--			WHEN OTHERS THEN
--				V_ERRO := 'ALERTA: Verifica inadimplencia - ERRO ' || SQLERRM(SQLCODE);
--	    	
--	    	END;
--	    
--	ELSIF (L_EXISTE = 'S' AND L_IND_INAD = 'S' AND L_DT_FIM_INAD IS NULL) THEN  --cliente com inadimplencia em aberto
--	  
--		V_IND_INAD := L_IND_INAD;
--		V_DT_INI_INAD := L_DT_INI_INAD;
--		V_DT_FIM_INAD := NULL;
--
--		BEGIN
--			-- SELECIONA A DATA QUE O CLIENTE SAIU DE INADIMPLENCIA
--			SELECT MAX(COL.COL_EXIT_DATE)
--			INTO V_DT_FIM_INAD
--			FROM COL_CUSTOMER COL
--			WHERE COL.ACCOUNT_NO   = L_ACCOUNT_NO
--				AND COL.COL_ACTIVE_FLAG  =  0
--				AND COL.COL_EXIT_DATE IS NOT NULL 
--				AND COL.COL_EXIT_DATE >= L_DT_TB_ATUALIZ; --data da ultima atualizacao
--
--			-- SE DATA EXISTE VAI ATUALIZAR TABELA
--			IF V_DT_FIM_INAD IS NOT NULL THEN
--
--				V_IND_INAD := 'N';
--				V_TP_ATUALIZ := 'A';
--
--			END IF;
--
--			EXCEPTION
--			WHEN NO_DATA_FOUND THEN
--				NULL;  --CLIENTE CONTINUA COM INADIMPLENCIA
--			WHEN OTHERS THEN
--				V_ERRO := 'ALERTA: Verifica se inadimplecia ativa - ERRO ' || SQLERRM(SQLCODE);
--		END;                
--	END IF; -- IF V_GVT_EXISTE_CLIENTE = 'N'
--END;	
--END; --BUSCA_INFORMACAO_INADIMPLENCIA

--
-- PROCEDURE
-- BUSCA_ISENCAO_IMPOSTOS
--

PROCEDURE BUSCA_ISENCAO_IMPOSTOS (
		L_ACCOUNT_NO 		NUMBER,
		L_CLIENTE 		VARCHAR2, 
		L_TELEFONE 		VARCHAR2,
		L_EOT_ORIGEM		NUMBER,
		L_NOME_ASSINANTE	VARCHAR2,
		L_EXISTE		VARCHAR2,
		L_IND_ISENCAO_TRIB	VARCHAR2,
		L_PERC_ISENCAO		NUMBER) IS

BEGIN
	
--	DBMS_OUTPUT.PUT_LINE('L_ACCOUNT_NO: ' || L_ACCOUNT_NO);
--	DBMS_OUTPUT.PUT_LINE('L_CLIENTE: ' || L_CLIENTE);
--	DBMS_OUTPUT.PUT_LINE('L_TELEFONE: ' || L_TELEFONE);
--	DBMS_OUTPUT.PUT_LINE('L_EOT_ORIGEM: ' || L_EOT_ORIGEM);
--	DBMS_OUTPUT.PUT_LINE('L_NOME_ASSINANTE: ' || L_NOME_ASSINANTE);
--	DBMS_OUTPUT.PUT_LINE('L_EXISTE: ' || L_EXISTE);
--	DBMS_OUTPUT.PUT_LINE('L_IND_ISENCAO_TRIB: ' || L_IND_ISENCAO_TRIB);
--	DBMS_OUTPUT.PUT_LINE('L_PERC_ISENCAO: ' || L_PERC_ISENCAO);

	BEGIN
		-- VERIFICA SE CLIENTE POSSUI ISENCAO	
		SELECT 'S' 
		INTO V_IND_ISENCAO_TRIB
		FROM CMF_EXEMPT
		WHERE ACCOUNT_NO = L_ACCOUNT_NO;
	
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_IND_ISENCAO_TRIB := 'N';
		WHEN OTHERS THEN   
			V_IND_ISENCAO_TRIB := 'N';
			UTL_FILE.PUT_LINE(V_LOG, 'ALERTA: Erro ao pesquisar isencao Tributaria do cliente ;' || SQLERRM(SQLCODE) || 
				L_EOT_ORIGEM || ';' || TRIM(L_CLIENTE) || ';' || 
				SUBSTR(L_NOME_ASSINANTE,1,40) || ';' || L_TELEFONE);
        END;

	IF V_IND_ISENCAO_TRIB = 'S' THEN
	BEGIN
		
		-- VERIFICA O PERCENTUAL DE ISENCAO
		SELECT RD.DISCOUNT_PERCENT
		INTO V_PERC_ISENCAO
		FROM CMF_EXEMPT         CMFE,
			CUSTOMER_CONTRACT  CC,
			CONTRACT_TYPES     CT,
			DISCOUNT_PLANS     DP,
			RATE_DISCOUNT      RD
		WHERE CMFE.ACCOUNT_NO   = L_ACCOUNT_NO
			AND CC.CONTRACT_LEVEL   = 1 
			AND CC.PARENT_ACCOUNT_NO = CMFE.ACCOUNT_NO
			AND CC.CONTRACT_TYPE    BETWEEN 19985 AND 19998
			AND CC.END_DT IS NULL
			AND CT.CONTRACT_TYPE    = CC.CONTRACT_TYPE 
			AND DP.PLAN_ID_DISCOUNT = CT.PLAN_ID_DISCOUNT
			AND RD.DISCOUNT_ID      = DP.DISCOUNT_ID;

		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_PERC_ISENCAO := 0;
		WHEN OTHERS THEN
			V_PERC_ISENCAO := 0;
			UTL_FILE.PUT_LINE(V_LOG,'Verifica percentual isencao - ERRO ' || SQLERRM(SQLCODE) ||
				L_EOT_ORIGEM || ';' || TRIM(L_CLIENTE) || ';' || 
				SUBSTR(L_NOME_ASSINANTE,1,40) || ';' || L_TELEFONE);
	
	END;
	ELSE -- IF V_IND_ISENCAO_TRIB = 'S' THEN
	
		V_PERC_ISENCAO := 0;
	
	END IF; -- IF V_IND_ISENCAO_TRIB = 'S' THEN

	-- VERIFICAR SE PRECISA ATUALIZAR ISENCAO DE IMPOSTOS
	IF L_EXISTE = 'S' AND
		(V_IND_ISENCAO_TRIB <> L_IND_ISENCAO_TRIB OR
		V_PERC_ISENCAO <> L_PERC_ISENCAO) THEN
		
		--DBMS_OUTPUT.PUT_LINE('ATUALIZOU ISENCAO IMPOSTOS');
		
		V_TP_ATUALIZ := 'A'; 
		
	END IF; -- IF L_EXISTE = 'S' AND
	
END; -- BUSCA_ISENCAO_IMPOSTOS

--
-- PROCEDURE
-- VALIDA_VALORES
--
--	*** VALIDAR VALORES
PROCEDURE VALIDA_VALORES (
		L_CLIENTE 		VARCHAR2, 
		L_TELEFONE 		VARCHAR2,
		L_EOT_ORIGEM		NUMBER,
		L_NOME_ASSINANTE	VARCHAR2 ) IS
BEGIN

	V_VLR_VALIDO_VARIAVEL := 'S';
	
	BEGIN -- INICIO: VALIDAR DE O EXTERNAL_ID DO CLIENTE EH VALIDO
    		V_VLR_AUX := TO_NUMBER(L_CLIENTE); 

		EXCEPTION
    			WHEN OTHERS THEN

        	UTL_FILE.PUT_LINE(V_LOG,'CLIENTE COM EXTERNAL_ID INCORRETO;' || L_EOT_ORIGEM || ';' || 
			TRIM(L_CLIENTE) || ';' || SUBSTR(L_NOME_ASSINANTE,1,40) || 
			';' || L_TELEFONE);  
        	
        	V_VLR_VALIDO_VARIAVEL := 'N';
        	
	END; -- FIM: VALIDAR DE O EXTERNAL_ID DO CLIENTE EH VALIDO
	
	BEGIN -- INICIO: VALIDAR SE O NUMERO DE TELEFONE EH VALIDO
    		V_VLR_AUX := TO_NUMBER(TRIM(L_TELEFONE)); 

		EXCEPTION
    			WHEN OTHERS THEN
        
        	UTL_FILE.PUT_LINE(V_LOG,'CLIENTE COM INSTANCIA INCORRETA;' || L_EOT_ORIGEM || ';' || 
			TRIM(L_CLIENTE) || ';' || SUBSTR(L_NOME_ASSINANTE,1,40) || 
			';' || L_TELEFONE);  
        	
        	V_VLR_VALIDO_VARIAVEL := 'N';
	END; -- FIM: VALIDAR SE O NUMERO DE TELEFONE EH VALIDO

END;
--
--
--
--	*** INICIO DO PROGRAMA ***
--
--
--
BEGIN

-- INICIO DO PROCESSAMENTO
	DBMS_OUTPUT.PUT_LINE('INICIO DE PROCESSAMENTO: ' || TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'));

-- GERANDO ARQUIVO DE LOG
	V_NOME_ARQ_LOG := 'GERACAOINFORMACOES_' || V_INDICE || '_' || TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') || '.log';
	V_LOG      := UTL_FILE.FOPEN(V_NOME_DIR_LOG, V_NOME_ARQ_LOG, 'W'); 

-- GRAVANDO HEADER DE LOG
	UTL_FILE.PUT_LINE(V_LOG,'DESCRICAO;EOT ORIGEM;CLIENTE;NOME;TELEFONE');
	
	V_NUM_REGISTRO := 0;

	SELECT ACCOUNT_MIN, ACCOUNT_MAX
	INTO V_ACCOUNT_MIN, V_ACCOUNT_MAX
	FROM GVT_CAD_CLIENTE_IND
	WHERE INDICE = V_INDICE;


-- ABRINDO CURSOR QUE CONTEM TODOS OS CLIENTES DA GVT
-- SE COLUNA EXTERNAL_ID IS NULL, QUER DIZER QUE O CLIENTE NUNCA FOI ENVIADO OU GERADO CADASTRO
	FOR REG_CLIENTE IN C_CLIENTE (V_ACCOUNT_MIN, V_ACCOUNT_MAX) LOOP -- INICIO: LEITURA DO CURSOR C_CLIENTE 
		
		-- PROCEDURE QUE ATUALIZA A VARIAVEL
		-- V_VLR_VALIDO_VARIAVEL
		VALIDA_VALORES (
			REG_CLIENTE.CLIENTE,
			REG_CLIENTE.TELEFONE,
			REG_CLIENTE.EOT_ORIGEM,
			REG_CLIENTE.NOME_ASSINANTE ); 
		
		V_TP_ATUALIZ := NULL;		
		V_TEMP := NULL;
		
		IF V_VLR_VALIDO_VARIAVEL = 'S' THEN -- SE VARIAVEIS SAO VALIDAS
		BEGIN

		-- +++ NAO ESQUECER DE VER V_TIPO_TELEFONE

			IF (REG_CLIENTE.EXISTE = 'N') THEN
				V_CLIENTE_EXISTE := REG_CLIENTE.EXISTE;
			ELSE
				V_CLIENTE_EXISTE := 'S';
			END IF;
				

			-- PASSA O EXTERNAL_ID DO CLIENTE SE ELE EXISTE OU N SE NAO EXISTE
			BUSCA_INFORMACOES_SIEBEL (
				V_CLIENTE_EXISTE, --REG_CLIENTE.EXISTE,
				REG_CLIENTE.CATEGORIA,
				REG_CLIENTE.CLIENTE,
				REG_CLIENTE.TELEFONE,
				REG_CLIENTE.CC_SOLN_ID,
				REG_CLIENTE.CNL,
				REG_CLIENTE.CC_IND_SIGILO,
				REG_CLIENTE.CC_TRONCO_TELEFONE,
				REG_CLIENTE.CC_RANGE); 

			IF V_ERRO IS NOT NULL THEN
            	
            		UTL_FILE.PUT_LINE(V_LOG, V_ERRO || ';' || REG_CLIENTE.EOT_ORIGEM || 
            			';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
						';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
						';' || REG_CLIENTE.TELEFONE); 
            
            END IF;

			IF (V_TP_ATUALIZ IS NOT NULL) THEN
				--DBMS_OUTPUT.PUT_LINE('BUSCA_INFORMACOES_SIEBEL');
				V_TEMP := V_TP_ATUALIZ;
			END IF;


--			DBMS_OUTPUT.PUT_LINE('V_SOLN_ID: ' || V_SOLN_ID);
--			DBMS_OUTPUT.PUT_LINE('V_IND_COBRANCA: ' || V_IND_COBRANCA);
--			DBMS_OUTPUT.PUT_LINE('V_TIPO_TELEFONE: ' || V_TIPO_TELEFONE);
--			DBMS_OUTPUT.PUT_LINE('V_ULT_CLIENTE: ' || V_ULT_CLIENTE);
--			DBMS_OUTPUT.PUT_LINE('V_IND_SIGILO: ' || V_IND_SIGILO);
--			DBMS_OUTPUT.PUT_LINE('V_RANGE: ' || V_RANGE);
			
			-- *** ATUALIZA AS VARIAVEIS
			-- V_DT_INI_SUSPENSAO
			-- V_DT_FIM_SUSPENSAO
			-- V_IND_SUSPENSAO
			-- V_TP_ATUALIZ
			
--			DBMS_OUTPUT.PUT_LINE('BUSCA_INFORMACAO_SUSPENSAO: ' || REG_CLIENTE.EXISTE);
			
			BUSCA_INFORMACAO_SUSPENSAO (
				V_CLIENTE_EXISTE, --REG_CLIENTE.EXISTE,
				REG_CLIENTE.ACCOUNT_NO,
				REG_CLIENTE.SUBSCR_NO,
				REG_CLIENTE.CC_SUSP_CL_INDICADOR,
				REG_CLIENTE.CC_SUSP_CL_DT_INI,
				REG_CLIENTE.CC_SUSP_CL_DT_FIM );

--			DBMS_OUTPUT.PUT_LINE('V_DT_INI_SUSPENSAO: ' || V_DT_INI_SUSPENSAO);
--			DBMS_OUTPUT.PUT_LINE('V_DT_FIM_SUSPENSAO: ' || V_DT_FIM_SUSPENSAO);
--			DBMS_OUTPUT.PUT_LINE('V_IND_SUSPENSAO: ' || V_IND_SUSPENSAO);
--			DBMS_OUTPUT.PUT_LINE('V_TP_ATUALIZ: ' || V_TP_ATUALIZ);
			
			IF V_ERRO IS NOT NULL THEN
                BEGIN

            		UTL_FILE.PUT_LINE(V_LOG, V_ERRO || ';' || REG_CLIENTE.EOT_ORIGEM || 
            			';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
						';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
						';' || REG_CLIENTE.TELEFONE); 
				END;
			END IF;

			IF (V_TEMP != V_TP_ATUALIZ) THEN
				--DBMS_OUTPUT.PUT_LINE('BUSCA_INFORMACOES_SIEBEL');
				V_TEMP := V_TP_ATUALIZ;
			END IF;


--			DBMS_OUTPUT.PUT_LINE('BUSCA_INFORMACAO_INADIMPLENCIA: ' || REG_CLIENTE.EXISTE);
			
			  -- Retirado devido ao upgarb 762 (confirmado com Marcelo por email)
			  /*
			  BUSCA_INFORMACAO_INADIMPLENCIA (
				V_CLIENTE_EXISTE, --REG_CLIENTE.EXISTE,
				REG_CLIENTE.CC_INAD_CL_INDICADOR,
				REG_CLIENTE.ACCOUNT_NO,
				REG_CLIENTE.CC_INAD_CL_DT_FIM,
				REG_CLIENTE.CC_INAD_CL_DT_INI,
				REG_CLIENTE.CC_DT_TB_ATUALIZ );
				*/
				
		    V_IND_INAD := 'N';
		    V_DT_INI_INAD := NULL;
		    V_DT_FIM_INAD := NULL;
				

--			DBMS_OUTPUT.PUT_LINE('V_IND_INAD: ' || V_IND_INAD);
--			DBMS_OUTPUT.PUT_LINE('V_DT_INI_INAD: ' || V_DT_INI_INAD);
--			DBMS_OUTPUT.PUT_LINE('V_DT_FIM_INAD: ' || V_DT_FIM_INAD);

			IF V_ERRO IS NOT NULL THEN
			BEGIN

        		UTL_FILE.PUT_LINE(V_LOG, V_ERRO || ';' || REG_CLIENTE.EOT_ORIGEM || 
        			';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
					';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
					';' || REG_CLIENTE.TELEFONE); 
			END;
			END IF;

			IF (V_TEMP != V_TP_ATUALIZ) THEN
				--DBMS_OUTPUT.PUT_LINE('BUSCA_INFORMACAO_INADIMPLENCIA');
				V_TEMP := V_TP_ATUALIZ;
			END IF;


--			DBMS_OUTPUT.PUT_LINE('BUSCA_ISENCAO_IMPOSTOS: ' || REG_CLIENTE.EXISTE);
			
			BUSCA_ISENCAO_IMPOSTOS (
				REG_CLIENTE.ACCOUNT_NO,
				REG_CLIENTE.CLIENTE,
				REG_CLIENTE.TELEFONE,
				REG_CLIENTE.EOT_ORIGEM,
				REG_CLIENTE.NOME_ASSINANTE,
				V_CLIENTE_EXISTE, --REG_CLIENTE.EXISTE,
				REG_CLIENTE.CC_IND_ISENCAO_TRIB,
				REG_CLIENTE.CC_PERCENTUAL_ISENCAO );

--			DBMS_OUTPUT.PUT_LINE('V_IND_ISENCAO_TRIB: ' || V_IND_ISENCAO_TRIB);
--			DBMS_OUTPUT.PUT_LINE('V_PERC_ISENCAO: ' || V_PERC_ISENCAO);
--			DBMS_OUTPUT.PUT_LINE('V_TP_ATUALIZ: ' || V_DT_FIM_INAD);

			IF V_ERRO IS NOT NULL THEN
			BEGIN

                    UTL_FILE.PUT_LINE(V_LOG, V_ERRO || ';' || REG_CLIENTE.EOT_ORIGEM || 
                    ';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
					';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
					';' || REG_CLIENTE.TELEFONE); 
			END;
			END IF;

			IF (V_TEMP != V_TP_ATUALIZ) THEN
				--DBMS_OUTPUT.PUT_LINE('BUSCA_ISENCAO_IMPOSTOS');
				V_TEMP := V_TP_ATUALIZ;
			END IF;

			-- BUSCANDO DADOS DE COBRANCA
			BUSCA_DADOS_COBRANCA (
				REG_CLIENTE.CLIENTE);

			IF V_ERRO IS NOT NULL THEN
			BEGIN
                    		UTL_FILE.PUT_LINE(V_LOG, V_ERRO || ';' || REG_CLIENTE.EOT_ORIGEM || 
                    			';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
					';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
					';' || REG_CLIENTE.TELEFONE); 
			END;
			END IF;

			-- VALIDANDO NUMERO DE INSTALACAO
			V_INST_NUMERO := NULL;
			V_INST_LOGRADOURO := REG_CLIENTE.INST_LOGRADOURO;

			IF INSTR(REG_CLIENTE.INST_LOGRADOURO,'(G') > 0 THEN
				V_INST_NUMERO := TRIM(SUBSTR(REG_CLIENTE.INST_LOGRADOURO,INSTR(REG_CLIENTE.INST_LOGRADOURO,')') + 1,7));
				V_INST_LOGRADOURO := SUBSTR(REG_CLIENTE.INST_LOGRADOURO,1,INSTR(REG_CLIENTE.INST_LOGRADOURO,'(G') - 1);
			ELSIF INSTR(REG_CLIENTE.INST_LOGRADOURO,',') > 0 THEN
				V_INST_NUMERO := TRIM(SUBSTR(REG_CLIENTE.INST_LOGRADOURO,INSTR(REG_CLIENTE.INST_LOGRADOURO,',') + 1,7));
				V_INST_LOGRADOURO := SUBSTR(REG_CLIENTE.INST_LOGRADOURO,1,INSTR(REG_CLIENTE.INST_LOGRADOURO,',') - 1);
			END IF;

			-- VALIDANDO ENDERECO DE COBRANCA
			IF V_COBR_LOGRADOURO IS NULL THEN

                V_COBR_LOGRADOURO := SUBSTR(V_INST_LOGRADOURO,1,50);
                V_COBR_NUMERO := V_INST_NUMERO;
                V_COBR_COMPLEMENTO := REG_CLIENTE.INST_COMPLEMENTO;
                V_COBR_BAIRRO := REG_CLIENTE.INST_BAIRRO;
                V_COBR_MUNICIPIO := REG_CLIENTE.INST_MUNICIPIO;
                    
			END IF;

			-- SE CLIENTE EH NOVO
			IF V_CLIENTE_EXISTE = 'N' THEN --REG_CLIENTE.EXISTE = 'N' THEN
			BEGIN

				--DBMS_OUTPUT.PUT_LINE('CLIENTE NOVO');				
				
				INSERT INTO  GVT_CADASTRO_CLIENTE (
					COD_EOT_ORIGEM, 	-- 01
					EXTERNAL_ID, 		-- 02
					SUBSCR_NO,		    -- 03
					NOME_ASSINANTE, 	-- 04
					TIPO_DOC, 	     	-- 05
					NUMERO_DOCUMENTO, 	-- 06
					INSC_ESTADUAL, 		-- 07
					CNAE_FISCAL, 		-- 08
					TIPO_TERMINAL , 	-- 09
					SOLN_ID,		    -- 10
					RANGE,			    -- 11
					LINHA_CNL, 		    -- 12
					LINHA_DDD, 		    -- 13
					LINHA_TELEFONE , 	-- 14
					TRONCO_CNL, 		-- 15
					TRONCO_DDD , 		-- 16
					TRONCO_TELEFONE, 	-- 17
					TRONCO_IDENT_COBRANCA, 	-- 18
					INST_TIPO_LOGRA , 	-- 19
					INST_LOGRADOURO, 	-- 20
					INST_NRO, 		-- 21
					INST_COMPLEMENTO, 	-- 22
					INST_BAIRRO, 		-- 23
					INST_MUNICIPIO, 	-- 24
					INST_CNL, 		-- 25
					INST_UF , 		-- 26
					INST_CEP, 		-- 27
					COB_TIPO_LOGRA , 	-- 28
					COB_LOGRADOURO , 	-- 29
					COB_NRO , 		-- 30
					COB_COMPLEMENTO, 	-- 31
					COB_BAIRRO,             -- 32
					COB_MUNICIPIO ,         -- 33
					COB_CNL,                -- 34
					COB_UF,                 -- 35
					COB_CEP ,               -- 36
					CONTATO_CNL,            -- 37
					CONTATO_DDD,            -- 38
					CONTATO_TELEFONE,       -- 39
					SUSP_CL_INDICADOR,      -- 40
					SUSP_CL_DT_INI,         -- 41
					SUSP_CL_DT_FIM,         -- 42
					INAD_CL_INDICADOR,      -- 43
					INAD_CL_DT_INI,         -- 44
					INAD_CL_DT_FIM,         -- 45
					IND_SIGILO ,            -- 46
					TP_ATUALIZ ,            -- 47
					DT_ATUALIZ,             -- 48
					TELEFONE_ANT_CNL,       -- 49
					TELEFONE_ANT_DDD,       -- 50
					TELEFONE_ANT_TELEFONE,  -- 51
					TELEFONE_ANT_DT_TROCA,  -- 52
					HR_EXECUCAO,            -- 53
					DT_ATIVACAO,            -- 54
					DT_DESATIVACAO,         -- 55
					IND_ISENCAO_TRIB,       -- 56
					PERCENTUAL_ISENCAO,     -- 57
					RETENCAO_TRIBUTOS,      -- 58
					DIA_VENC_FATURA,        -- 59
					MOTIVO_ENVIO_CADASTRO,  -- 60
					DT_TB_ATUALIZ, 		-- 61
					GERA_TXT )		-- 62
				VALUES 
					(TO_NUMBER(REG_CLIENTE.EOT_ORIGEM), 			-- 01
					REG_CLIENTE.CLIENTE,                                    -- 02
					REG_CLIENTE.SUBSCR_NO,                                  -- 03
					REG_CLIENTE.NOME_ASSINANTE,                             -- 04
					REG_CLIENTE.TIPO_DOC,                                   -- 05
					REG_CLIENTE.NUMERO_DOCUMENTO,                           -- 06
					REG_CLIENTE.INSC_ESTADUAL,                              -- 07
					NULL,                                                   -- 08
					REG_CLIENTE.TIPO_TERMINAL ,                             -- 09
					V_SOLN_ID,                                      		-- 10
					NVL(V_RANGE,'N'),                               		-- 11
					REG_CLIENTE.CNL, --V_LINHA_CNL,  --TELEFONE             -- 12
					SUBSTR(REG_CLIENTE.TELEFONE,1,2), --V_LINHA_DDD,        -- 13
					SUBSTR(REG_CLIENTE.TELEFONE,3,8), --V_LINHA_TELEFONE,   -- 14
					V_TRONCO_CNL , --TRONCO_CNL,                    		-- 15
					V_TRONCO_DDD, --TRONCO_DDD,                     		-- 16
					V_TRONCO_TELEFONE, --TRONCO_TELEFONE,           		-- 17
					V_IND_COBRANCA, --TRONCO_IDENT_COBRANCA,        		-- 18
					'SEMTIPO' ,                                             -- 19
					SUBSTR(V_INST_LOGRADOURO,1,50),               			-- 20
					V_INST_NUMERO, --REG_CLIENTE.INST_NUMERO,               -- 21
					REG_CLIENTE.INST_COMPLEMENTO,                           -- 22
					REG_CLIENTE.INST_BAIRRO,                                -- 23
					REG_CLIENTE.INST_MUNICIPIO ,                            -- 24
					REG_CLIENTE.CNL, --V_CNL,                               -- 25
					REG_CLIENTE.INST_UF,                                    -- 26
					REPLACE(TRIM(REG_CLIENTE.INST_CEP),'-',''),             -- 27
					'SEMTIPO' ,                                             -- 28
          V_COBR_LOGRADOURO, 										        -- 29
          V_COBR_NUMERO,											        -- 30
          V_COBR_COMPLEMENTO, 									            -- 31
          V_COBR_BAIRRO, 											        -- 32
          V_COBR_MUNICIPIO , 										        -- 33
					REG_CLIENTE.CNL, --V_CNL,                               -- 34
					REG_CLIENTE.COBR_UF,                                    -- 35
					REPLACE(TRIM(REG_CLIENTE.COBR_CEP),'-',''),             -- 36
					REG_CLIENTE.CNL, --V_CNL,                               -- 37
					SUBSTR(TRIM(REG_CLIENTE.TELEFONE),1,2),                 -- 38
					SUBSTR(TRIM(REG_CLIENTE.TELEFONE),3,8),                 -- 39
					V_IND_SUSPENSAO,                                        -- 40
					V_DT_INI_SUSPENSAO,                                     -- 41
					NULL,                                                   -- 42
					V_IND_INAD,    --INAD_CL_INDICADOR,                     -- 43
					V_DT_INI_INAD, --INAD_CL_DT_INI,                        -- 44
					V_DT_FIM_INAD, --INAD_CL_DT_FIM,                        -- 45
					V_IND_SIGILO,  --IND_SIGILO  SIEBEL              		-- 46
					'I',                                                    -- 47
					SYSDATE, --V_DATA,                                      -- 48
					NULL,                                                   -- 49
					NULL,                                                   -- 50
					NULL,                                                   -- 51
					NULL,                                                   -- 52
					NULL,                                                   -- 53
					REG_CLIENTE.DT_ATIVACAO,                                -- 54
					REG_CLIENTE.DT_DESATIVACAO,                             -- 55
					V_IND_ISENCAO_TRIB,                                     -- 56
					V_PERC_ISENCAO,                                         -- 57
					REG_CLIENTE.IND_RETENCAO_TRIBUTOS,                      -- 58
					REG_CLIENTE.DIA_VENC_FATURA,                            -- 59
					NULL,                                                   -- 60
					SYSDATE, --V_DATA,                                      -- 61
					'S');                                                   -- 62
					
				EXCEPTION
				WHEN OTHERS THEN

					UTL_FILE.PUT_LINE(V_LOG,'ALERTA: ERRO AO INSERIR CLIENTE ' || 
						SQLERRM(SQLCODE)  ||
						';' || REG_CLIENTE.EOT_ORIGEM || 
	                    ';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
						';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
						';' || REG_CLIENTE.TELEFONE); 
			END;
			ELSE

				--REG_CLIENTE.EXISTE := 'N';
				
				--IF V_TP_ATUALIZ IS NULL THEN
				--	DBMS_OUTPUT.PUT_LINE('CLIENTE ' || REG_CLIENTE.ACCOUNT_NO || ' SEM ATUALIZAÇÃO');
				--END IF;
				
				--IF REG_CLIENTE.EXISTE = 'S' AND V_TP_ATUALIZ IS NULL THEN     --verifica outros campos se alterados.
				IF (V_CLIENTE_EXISTE = 'S') THEN
				BEGIN
				
					--DBMS_OUTPUT.PUT_LINE('PASSEI AKI');
					
				
					IF NVL(REG_CLIENTE.CC_NOME_ASSINANTE,' ')     <> NVL(REG_CLIENTE.NOME_ASSINANTE,' ') OR
						NVL(REG_CLIENTE.CC_TIPO_DOC,' ')          <> NVL(REG_CLIENTE.TIPO_DOC,' ') OR
						NVL(REG_CLIENTE.CC_NUMERO_DOCUMENTO,' ')  <> NVL(REG_CLIENTE.NUMERO_DOCUMENTO,' ') OR
						NVL(REG_CLIENTE.CC_INSC_ESTADUAL,' ')     <> NVL(REG_CLIENTE.INSC_ESTADUAL,' ') OR
						NVL(REG_CLIENTE.CC_TIPO_TERMINAL,' ')     <> NVL(REG_CLIENTE.TIPO_TERMINAL,' ')  OR
						NVL(REG_CLIENTE.CC_INST_LOGRADOURO,' ')   <> NVL(SUBSTR(V_INST_LOGRADOURO,1,50),' ') OR
						NVL(REG_CLIENTE.CC_INST_NRO,' ')          <> NVL(V_INST_NUMERO,' ') OR
						NVL(REG_CLIENTE.CC_INST_COMPLEMENTO,' ')  <> NVL(REG_CLIENTE.INST_COMPLEMENTO,' ') OR
						NVL(REG_CLIENTE.CC_INST_BAIRRO,' ')       <> NVL(REG_CLIENTE.INST_BAIRRO,' ') OR
						NVL(REG_CLIENTE.CC_INST_MUNICIPIO,' ')    <> NVL(REG_CLIENTE.INST_MUNICIPIO,' ') OR
						NVL(REG_CLIENTE.CC_INST_UF,' ')           <> NVL(REG_CLIENTE.INST_UF,' ') OR
						NVL(REPLACE(TRIM(REG_CLIENTE.CC_INST_CEP),'-',''),' ')          <> NVL(REPLACE(TRIM(REG_CLIENTE.INST_CEP),'-',''),' ') OR
						NVL(REG_CLIENTE.CC_COBR_LOGRADOURO,' ')   <> NVL(V_COBR_LOGRADOURO,' ')  OR
						NVL(REG_CLIENTE.CC_COBR_NRO,' ')          <> NVL(V_COBR_NUMERO,' ') OR 
						NVL(REG_CLIENTE.CC_COBR_COMPLEMENTO,' ')  <> NVL(V_COBR_COMPLEMENTO,' ') OR 
						NVL(REG_CLIENTE.CC_COBR_BAIRRO,' ')       <> NVL(V_COBR_BAIRRO,' ') OR 
						NVL(REG_CLIENTE.CC_COBR_MUNICIPIO,' ')    <> NVL(V_COBR_MUNICIPIO,' ') OR 
						NVL(REG_CLIENTE.CC_COBR_UF,' ')           <> NVL(REG_CLIENTE.COBR_UF,' ') OR 
						NVL(REPLACE(TRIM(REG_CLIENTE.CC_COBR_CEP),'-',''),' ')  <> NVL(REPLACE(TRIM(REG_CLIENTE.COBR_CEP),'-',''),' ') OR 
						NVL(REG_CLIENTE.CC_DIA_VENC_FATURA,0)     <> NVL(REG_CLIENTE.DIA_VENC_FATURA,0) OR
						NVL(REG_CLIENTE.CC_RETENCAO_TRIBUTOS,' ') <> NVL(REG_CLIENTE.IND_RETENCAO_TRIBUTOS,' ') THEN

						--DBMS_OUTPUT.PUT_LINE('ATUALIZOU ENDERECO : ' || REG_CLIENTE.EOT_ORIGEM);
						V_TP_ATUALIZ := 'A';
							
					END IF;
	

					IF (NVL(REG_CLIENTE.DT_DESATIVACAO,SYSDATE) <> NVL(REG_CLIENTE.CC_DT_DESATIVACAO,SYSDATE)) AND
						REG_CLIENTE.DT_DESATIVACAO IS NOT NULL THEN

						--DBMS_OUTPUT.PUT_LINE('ATUALIZOU CLIENTE SAIU BASE');
						V_TP_ATUALIZ := 'E';
						
					END IF;
					
					
					
					--IF (REG_CLIENTE.EXISTE = 'S' AND (V_TP_ATUALIZ = 'A' OR V_TP_ATUALIZ = 'E')) THEN
					IF (V_TP_ATUALIZ = 'A' OR V_TP_ATUALIZ = 'E') THEN
					BEGIN	
						--verifica se suspensao nao mais valida
						IF (REG_CLIENTE.CC_SUSP_CL_DT_FIM < SYSDATE AND V_IND_SUSPENSAO = 'N') THEN    --nao existe nova suspensao
	
							V_DT_INI_SUSPENSAO := NULL;
							V_DT_FIM_SUSPENSAO := NULL;
	
						END IF;
						
						--verifica se inadimplencia nao mais valida
						IF (REG_CLIENTE.CC_INAD_CL_DT_FIM < SYSDATE AND V_IND_INAD = 'N') THEN    --nao existe nova inadimplencia
	
							V_DT_INI_INAD := NULL;
							V_DT_FIM_INAD := NULL;             
	
						END IF;
	                    
						-- REALIZAR O UPDATE
						BEGIN
							
							UPDATE  GVT_CADASTRO_CLIENTE
							SET NOME_ASSINANTE   		= REG_CLIENTE.NOME_ASSINANTE, 
								TIPO_DOC         	= REG_CLIENTE.TIPO_DOC, 
								NUMERO_DOCUMENTO 	= REG_CLIENTE.NUMERO_DOCUMENTO,
								INSC_ESTADUAL    	= REG_CLIENTE.INSC_ESTADUAL, 
								TIPO_TERMINAL    	= REG_CLIENTE.TIPO_TERMINAL,  
								INST_LOGRADOURO  	= SUBSTR(V_INST_LOGRADOURO,1,50), 
								INST_NRO         	= V_INST_NUMERO, --REG_CLIENTE.INST_NUMERO,  
								INST_COMPLEMENTO 	= REG_CLIENTE.INST_COMPLEMENTO, 
								INST_BAIRRO      	= REG_CLIENTE.INST_BAIRRO, 
								INST_MUNICIPIO   	= REG_CLIENTE.INST_MUNICIPIO, 
								INST_UF          	= REG_CLIENTE.INST_UF, 
								INST_CEP         	= REPLACE(TRIM(REG_CLIENTE.INST_CEP),'-',''),  
								COB_LOGRADOURO   	= V_COBR_LOGRADOURO, 
								COB_NRO          	= V_COBR_NUMERO, --REG_CLIENTE.COBR_NUMERO,
								COB_COMPLEMENTO  	= V_COBR_COMPLEMENTO, 
								COB_BAIRRO       	= V_COBR_BAIRRO, 
								COB_MUNICIPIO    	= V_COBR_MUNICIPIO, 
								COB_CNL          	= REG_CLIENTE.CNL,
								COB_UF           	= REG_CLIENTE.COBR_UF, 
								COB_CEP          	= REPLACE(TRIM(REG_CLIENTE.COBR_CEP),'-',''),
								SUSP_CL_INDICADOR 	= V_IND_SUSPENSAO, 
								SUSP_CL_DT_INI   	= V_DT_INI_SUSPENSAO, 
								SUSP_CL_DT_FIM   	= V_DT_FIM_SUSPENSAO,  
								INAD_CL_INDICADOR 	= V_IND_INAD,   --INAD_CL_INDICADOR,
								INAD_CL_DT_INI   	= V_DT_INI_INAD, --INAD_CL_DT_INI,
								INAD_CL_DT_FIM   	= V_DT_INI_INAD, --INAD_CL_DT_FIM,
								IND_SIGILO       	= V_IND_SIGILO , --IND_SIGILO SIEBEL
								TP_ATUALIZ       	= V_TP_ATUALIZ,
								DT_ATUALIZ       	= SYSDATE, --V_DATA,
								DT_ATIVACAO      	= REG_CLIENTE.DT_ATIVACAO,
								DT_DESATIVACAO   	= REG_CLIENTE.DT_DESATIVACAO,
								IND_ISENCAO_TRIB 	= V_IND_ISENCAO_TRIB,
								PERCENTUAL_ISENCAO 	= V_PERC_ISENCAO,  
								RETENCAO_TRIBUTOS  	= REG_CLIENTE.IND_RETENCAO_TRIBUTOS,
								DIA_VENC_FATURA    	= REG_CLIENTE.DIA_VENC_FATURA,
								DT_TB_ATUALIZ 		= SYSDATE, --V_DATA, 
								GERA_TXT      		= 'S'
							WHERE COD_EOT_ORIGEM = REG_CLIENTE.EOT_ORIGEM
								AND EXTERNAL_ID    = REG_CLIENTE.CLIENTE
								AND SUBSCR_NO      = REG_CLIENTE.SUBSCR_NO;
		
							EXCEPTION
							WHEN OTHERS THEN

								UTL_FILE.PUT_LINE(V_LOG,'ALERTA: ERRO AO ALTERAR CLIENTE ' || SQLERRM(SQLCODE) || 
									SQLERRM(SQLCODE)  ||
									';' || REG_CLIENTE.EOT_ORIGEM || 
				                    			';' || SUBSTR(REG_CLIENTE.CLIENTE,1,12) ||
									';' || SUBSTR(REG_CLIENTE.NOME_ASSINANTE,1,40) || 
									';' || REG_CLIENTE.TELEFONE); 
						END; 

				
					END;
					END IF; -- IF (REG_CLIENTE.EXISTE = 'S' AND (V_TP_ATUALIZ = 'A' OR V_TP_ATUALIZ = 'E'))
				
				END;
				END IF; -- IF V_GVT_EXISTE_CLIENTE = 'S' AND V_TP_ATUALIZ IS NULL

			END IF;

		END;
		END IF; -- IF V_VLR_VALIDO_VARIAVEL = 'S'

        -- CONTADOR PARA COMMIT
        V_NUM_REGISTRO := V_NUM_REGISTRO + 1;

        IF V_NUM_REGISTRO = 1000 THEN
			V_NUM_REGISTRO := 0;
			COMMIT;
        END IF;

		
	END LOOP; -- FIM: LEITURA DO CURSOR C_CLIENTE
	
-- HABILITAR APOS CONCLUSAO
	--LIMPA_CLIENTES_TEMPORARIOS;
	
	COMMIT;
	
	-- FECHANDO ARQUIVO DE LOG
	UTL_FILE.FCLOSE(V_LOG);
	DBMS_OUTPUT.PUT_LINE('ARQUIVO DE LOG: ' || V_NOME_ARQ_LOG);
	DBMS_OUTPUT.PUT_LINE('FIM DE PROCESSAMENTO: ' || TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'));
	DBMS_OUTPUT.PUT_LINE('Execucao encerrada com Sucesso!!!');


END;
/